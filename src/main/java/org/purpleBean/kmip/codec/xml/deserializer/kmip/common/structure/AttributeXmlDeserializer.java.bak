package org.purpleBean.kmip.codec.xml.deserializer.kmip.common.structure;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;
import org.purpleBean.kmip.*;
import org.purpleBean.kmip.codec.xml.deserializer.kmip.KmipDataTypeXmlDeserializer;
import org.purpleBean.kmip.common.structure.Attribute;

import java.io.IOException;
import java.util.Map;

public class AttributeXmlDeserializer extends KmipDataTypeXmlDeserializer<Attribute> {
    private final KmipTag kmipTag = new KmipTag(KmipTag.Standard.ATTRIBUTE);
    private final EncodingType encodingType = EncodingType.STRUCTURE;

    @Override
    public Attribute deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        ObjectCodec codec = p.getCodec();
        JsonNode node = codec.readTree(p);

        if (!node.isObject()) {
            ctxt.reportInputMismatch(Attribute.class, "Expected XML object for Attribute");
            return null;
        }

        if (p instanceof FromXmlParser && !kmipTag.getDescription().equalsIgnoreCase(((FromXmlParser) p).getStaxReader().getLocalName())) {
            ctxt.reportInputMismatch(Attribute.class, "Invalid Tag for Attribute");
            return null;
        }

        var fields = node.fields();

        KmipSpec spec = KmipContext.getSpec();

        JsonNode attrNameNode = null;
        JsonNode attrIndexNode = null;
        JsonNode attrValueNode = null;
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> entry = fields.next();
            KmipTag.Value nodeTag = KmipTag.fromName(spec, entry.getKey());
            switch (nodeTag) {
                case KmipTag.Standard.ATTRIBUTE_NAME -> attrNameNode = entry.getValue();
                case KmipTag.Standard.ATTRIBUTE_INDEX -> attrIndexNode = entry.getValue();
                case KmipTag.Standard.ATTRIBUTE_VALUE -> attrValueNode = entry.getValue();
                default -> throw new IllegalArgumentException("Unsupported tag: " + nodeTag);
            }
        }

        if (attrNameNode == null || attrValueNode == null) {
            throw new IllegalArgumentException("Missing required fields for Attribute");
        }

        if (!attrValueNode.has("type")) {
            throw new IllegalArgumentException("Missing 'type' field for Attribute");
        }

        Attribute.AttributeName attrName = p.getCodec().treeToValue(attrNameNode, Attribute.AttributeName.class);
        String name = StringUtils.covertTitleToPascalCase(attrName.getName());
        KmipTag.Value kmipTagValue = KmipTag.fromName(spec, name);
        EncodingType encodingType = EncodingType.fromName(attrValueNode.get("type").asText()).get();
        Class<?> attrClass = KmipAttribute.getClassFromRegistry(spec, kmipTagValue, encodingType);

        ObjectNode attrValueNodeTag = (ObjectNode) attrValueNode;
        attrValueNodeTag.put("tag", kmipTagValue.getDescription());

        Attribute attribute;
        if (attrIndexNode == null) {
            attribute = Attribute.of((KmipAttribute) p.getCodec().treeToValue(attrValueNode, attrClass));
        } else {
            Attribute.AttributeIndex attrIndex = p.getCodec().treeToValue(attrIndexNode, Attribute.AttributeIndex.class);
            attribute = Attribute.of((KmipAttribute) p.getCodec().treeToValue(attrValueNode, attrClass), attrIndex.getIndex());
        }

        if (!attribute.isSupportedFor(spec)) {
            ctxt.reportInputMismatch(Attribute.class, "Attribute not supported for spec " + spec);
            return null;
        }

        return attribute;
    }
}
